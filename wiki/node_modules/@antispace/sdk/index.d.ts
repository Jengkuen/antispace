import { renderUI } from "./renderer";
declare const components: {
    Button: (props: {
        action: string;
        text: string;
        loadingText?: string | undefined;
        disabled?: boolean | undefined;
        disabledWhen?: string | undefined;
        type?: "negative" | "accent" | "bold" | "primary" | "secondary" | undefined;
        size?: "small" | "medium" | "large" | undefined;
    }) => any;
    Text: (props: {
        type?: "small" | "display" | "heading1" | "heading2" | "heading3" | "subheading" | "body" | "text" | "caption" | "dim" | "negative" | "positive" | "accent" | "cyber" | "light" | undefined;
        align?: "center" | "left" | "right" | undefined;
        weight?: "medium" | "light" | "regular" | "semibold" | "bold" | undefined;
        tracking?: "tighter" | "tight" | "normal" | "wide" | "wider" | undefined;
        children: any;
    }) => any;
    Row: (props: {
        children: any;
        align?: "top" | "center" | "bottom" | undefined;
        justify?: "center" | "start" | "end" | "space-between" | "space-around" | undefined;
        spacing?: "small" | "medium" | "large" | undefined;
        padding?: "small" | "medium" | "large" | "none" | undefined;
        type?: "default" | "border" | "side-border" | "side-border-reverse" | undefined;
        highlighted?: boolean | undefined;
        width?: "full" | "half" | "auto" | undefined;
        clickAction?: string | undefined;
    }) => any;
    Column: (props: {
        children: any;
        align?: "center" | "left" | "right" | undefined;
        justify?: "center" | "start" | "end" | "space-between" | "space-around" | undefined;
        spacing?: "small" | "medium" | "large" | undefined;
        padding?: "small" | "medium" | "large" | "none" | undefined;
        type?: "default" | "border" | undefined;
        highlighted?: boolean | undefined;
        width?: "full" | "half" | "auto" | undefined;
        clickAction?: string | undefined;
    }) => any;
    Input: (props: {
        name: string;
        type?: "number" | "text" | "date" | undefined;
        placeholder?: string | undefined;
        disabled?: boolean | undefined;
        width?: "full" | "half" | "auto" | undefined;
        disabledWhen?: string | undefined;
    }) => any;
    Textarea: (props: {
        name: string;
        placeholder?: string | undefined;
        disabled?: boolean | undefined;
        width?: "full" | "half" | "auto" | undefined;
        disabledWhen?: string | undefined;
    }) => any;
    Select: (props: {
        name: string;
        disabled?: boolean | undefined;
        disabledWhen?: string | undefined;
        width?: "full" | "half" | "auto" | undefined;
        children: any;
        action?: string | undefined;
        value?: string | undefined;
    }) => any;
    SelectOption: (props: {
        value: string;
        label: string;
    }) => any;
    Checkbox: (props: {
        name: string;
        label?: string | undefined;
        disabled?: boolean | undefined;
        disabledWhen?: string | undefined;
        action?: string | undefined;
        type?: "checkbox" | "toggle" | undefined;
    }) => any;
    Image: (props: {
        src: string;
        alt?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        fit?: "cover" | "contain" | undefined;
        rounded?: boolean | undefined;
        filter?: "grayscale" | undefined;
        tint?: string | undefined;
    }) => any;
    Link: (props: {
        href: string;
        text: string;
    }) => any;
    Divider: (props: {
        type?: "horizontal" | "vertical" | undefined;
    }) => any;
    Badge: (props: {
        text: string;
        type?: "accent" | "primary" | "secondary" | "danger" | undefined;
    }) => any;
};
export { components, renderUI };
export type AntispaceContext<ActionMap extends Record<string, any>> = {
    [K in keyof ActionMap]: {
        action: K;
        values: ActionMap[K];
        meta: AntispaceMetadata;
    };
}[keyof ActionMap];
export interface AntispaceAppManifest<T extends Record<string, AntispaceAppFunction> = Record<string, AntispaceAppFunction>> {
    name: string;
    slug: string;
    description?: string;
    image?: string;
    wantsPage: boolean;
    wantsRefresh: boolean;
    hotkey: string;
    functions: T;
}
export interface AntispaceAppFunction<Name extends string = string, Params = {
    [key: string]: any;
}> {
    type: "function";
    function: {
        name: Name;
        description: string;
        parameters: {
            type: "object";
            properties: {
                [key: string]: {
                    type: "boolean" | "string" | "number" | "array" | "object";
                    description: string;
                };
            };
            required: string[];
        };
    };
}
export type AntispaceMetadata = {
    user: {
        id: string;
        name: string;
        theme: string;
    };
};
export type AntispaceAIRequest<M extends AntispaceAppManifest> = {
    [K in keyof M["functions"]]: {
        name: M["functions"][K]["function"]["name"];
        parameters: M["functions"][K] extends AntispaceAppFunction<any, infer P> ? P : never;
        meta: AntispaceMetadata;
    };
}[keyof M["functions"]];
//# sourceMappingURL=index.d.ts.map